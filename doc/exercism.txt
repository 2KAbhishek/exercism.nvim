*exercism.txt*        For Neovim >= 0.8.0        Last change: 2024 November 10

==============================================================================
Table of Contents                                 *exercism-table-of-contents*

  - Features                                               |exercism-features|
  - Setup                                                     |exercism-setup|
  - Usage                                                     |exercism-usage|
  - What’s Next                                     |exercism-what’s-next|
  - Behind The Code                                 |exercism-behind-the-code|

exercism.nvim is a neovim plugin that allows neovim users to `<action>`.


FEATURES                                                   *exercism-features*

- Includes a ready to go neovim plugin exercism
- Comes with a lint and test CI action
- Includes a Github action to auto generate vimdocs
- Comes with a ready to go README exercism
- Works with mkrepo <https://github.com/2kabhishek/mkrepo>


SETUP                                                         *exercism-setup*


REQUIREMENTS ~

- Latest version of `neovim`


INSTALLATION ~

>lua
    -- Lazy
    {
        '2kabhishek/exercism.nvim',
        cmd = 'ExercismHello',
        -- Add your custom configs here, keep it blank for default configs (required)
        opts = {},
        -- Use this for local development
        -- dir = '~/path-to/exercism.nvim',
    },
<


USAGE                                                         *exercism-usage*

1. Fork the `exercism.nvim` repo


2. Update the plugin name, file names etc, change `exercism` to `your-plugin-name`


3. Add the code required for your plugin,

- Code entrypoint is exercism.lua <./lua/exercism.lua>
- Add user configs to config.lua <./lua/exercism/config.lua>
- For adding commands and keybindngs use commands.lua <./lua/exercism/commands.lua>
- Separate plugin logic into modules under modules <./lua/exercism/> dir


4. Add test code to the tests <./tests/> directory


5. Update the README


6. Tweak the docs action <./.github/workflows/docs.yml> file to reflect your
username, commit message and plugin name

- Generating vimdocs needs write access to actions (repo settings > actions > general > workflow permissions)




CONFIGURATION ~

exercism.nvim can be configured using the following options:

>lua
    exercism.setup({
        name = 'exercism.nvim', -- Name to be greeted, 'World' by default
    })
<


COMMANDS ~

`exercism.nvim` adds the following commands:

- `ExercismHello`Shows a hello message with the confugred name.


KEYBINDINGS ~

It is recommended to use:

- `<leader>th,` for `ExercismHello`


  NOTE: By default there are no configured keybindings.

HELP ~

Run `:help exercism.txt` for more details.


WHAT’S NEXT                                         *exercism-what’s-next*

Planning to add `<feature/module>`.


TO-DO ~

- Setup repo
- Think real hard
- Start typing


BEHIND THE CODE                                     *exercism-behind-the-code*


INSPIRATION ~

exercism.nvim was inspired by nvim-plugin-exercism
<https://github.com/ellisonleao/nvim-plugin-exercism>, I added some changes on
top to make setting up a new plugin faster.


CHALLENGES/LEARNINGS ~

- The main challenges were `<issue/difficulty>`
- I learned about `<learning/accomplishment>`


TOOLING ~

- dots2k <https://github.com/2kabhishek/dots2k> — Dev Environment
- nvim2k <https://github.com/2kabhishek/nvim2k> — Personalized Editor
- sway2k <https://github.com/2kabhishek/sway2k> — Desktop Environment
- qute2k <https://github.com/2kabhishek/qute2k> — Personalized Browser


MORE INFO ~

- nerdy.nvim <https://github.com/2kabhishek/nerdy.nevim> — Find nerd glyphs easily
- tdo.nvim <https://github.com/2KAbhishek/tdo.nvim> — Fast and simple notes in Neovim
- termim.nvim <https://github.com/2kabhishek/termim,nvim> — Neovim terminal improved


Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
